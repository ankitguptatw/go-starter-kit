// Code generated by mockery v2.43.2. DO NOT EDIT.

package contract

import (
	context "context"
	dao "myapp/persistence/dao"

	mock "github.com/stretchr/testify/mock"
)

// PaymentProvider is an autogenerated mock type for the PaymentProvider type
type PaymentProvider struct {
	mock.Mock
}

// GetPayment provides a mock function with given fields: ctx, id
func (_m *PaymentProvider) GetPayment(ctx context.Context, id uint) (dao.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 dao.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (dao.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) dao.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dao.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentProvider creates a new instance of PaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentProvider {
	mock := &PaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
