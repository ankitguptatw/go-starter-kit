// Code generated by mockery v2.43.2. DO NOT EDIT.

package contract

import (
	context "context"
	dao "myapp/persistence/dao"

	mock "github.com/stretchr/testify/mock"
)

// BankProvider is an autogenerated mock type for the BankProvider type
type BankProvider struct {
	mock.Mock
}

// GetBank provides a mock function with given fields: ctx, query
func (_m *BankProvider) GetBank(ctx context.Context, query string) (dao.Bank, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetBank")
	}

	var r0 dao.Bank
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dao.Bank, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dao.Bank); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(dao.Bank)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanks provides a mock function with given fields: ctx
func (_m *BankProvider) GetBanks(ctx context.Context) ([]dao.Bank, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBanks")
	}

	var r0 []dao.Bank
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dao.Bank, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dao.Bank); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.Bank)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBankProvider creates a new instance of BankProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBankProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *BankProvider {
	mock := &BankProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
