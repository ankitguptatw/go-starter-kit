// Code generated by mockery v2.43.2. DO NOT EDIT.

package contract

import (
	context "context"
	httpclient "myapp/crossCutting/httpclient"

	mock "github.com/stretchr/testify/mock"

	params "myapp/crossCutting/httpclient/params"
)

// HTTPClient is an autogenerated mock type for the HTTPClient type
type HTTPClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, path, headers, result
func (_m *HTTPClient) Delete(ctx context.Context, path string, headers *params.Headers, result interface{}) httpclient.HTTPResponse {
	ret := _m.Called(ctx, path, headers, result)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 httpclient.HTTPResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *params.Headers, interface{}) httpclient.HTTPResponse); ok {
		r0 = rf(ctx, path, headers, result)
	} else {
		r0 = ret.Get(0).(httpclient.HTTPResponse)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, path, queryParams, headers, result
func (_m *HTTPClient) Get(ctx context.Context, path string, queryParams *params.QueryParams, headers *params.Headers, result interface{}) httpclient.HTTPResponse {
	ret := _m.Called(ctx, path, queryParams, headers, result)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 httpclient.HTTPResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *params.QueryParams, *params.Headers, interface{}) httpclient.HTTPResponse); ok {
		r0 = rf(ctx, path, queryParams, headers, result)
	} else {
		r0 = ret.Get(0).(httpclient.HTTPResponse)
	}

	return r0
}

// Post provides a mock function with given fields: ctx, path, payload, headers, result
func (_m *HTTPClient) Post(ctx context.Context, path string, payload interface{}, headers *params.Headers, result interface{}) httpclient.HTTPResponse {
	ret := _m.Called(ctx, path, payload, headers, result)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 httpclient.HTTPResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *params.Headers, interface{}) httpclient.HTTPResponse); ok {
		r0 = rf(ctx, path, payload, headers, result)
	} else {
		r0 = ret.Get(0).(httpclient.HTTPResponse)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, path, payload, headers, result
func (_m *HTTPClient) Put(ctx context.Context, path string, payload interface{}, headers *params.Headers, result interface{}) httpclient.HTTPResponse {
	ret := _m.Called(ctx, path, payload, headers, result)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 httpclient.HTTPResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *params.Headers, interface{}) httpclient.HTTPResponse); ok {
		r0 = rf(ctx, path, payload, headers, result)
	} else {
		r0 = ret.Get(0).(httpclient.HTTPResponse)
	}

	return r0
}

// NewHTTPClient creates a new instance of HTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPClient {
	mock := &HTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
